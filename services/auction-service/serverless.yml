service: hyperlocal-auction-service
frameworkVersion: '3'

plugins:
  - serverless-esbuild
  - serverless-domain-manager

provider:
  name: aws
  region: ca-central-1
  runtime: nodejs18.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    AUCTIONS_TABLE_NAME: ${self:custom.HyperlocalAuctionsTable.name}
    AUCTIONS_BUCKET_NAME: ${self:custom.HyperlocalAuctionsBucket.name}
    MAIL_QUEUE_URL: ${self:custom.HyperlocalMailQueue.url}
  iam:
    role:
      statements:
        - ${file(iam/HyperlocalAuctionsTableIAM.yml):HyperlocalAuctionsTableIAM}
        - ${file(iam/HyperlocalMailQueueIAM.yml):HyperlocalMailQueueIAM}
        - ${file(iam/HyperlocalAuctionsBucketIAM.yml):HyperlocalAuctionsBucketIAM}

resources:
  Resources:
    HyperlocalAuctionsTable: ${file(resources/HyperlocalAuctionsTable.yml):HyperlocalAuctionsTable}
    HyperlocalAuctionsBucket: ${file(resources/HyperlocalAuctionsBucket.yml):HyperlocalAuctionsBucket}
    HyperlocalAuctionsBucketPolicy: ${file(resources/HyperlocalAuctionsBucket.yml):HyperlocalAuctionsBucketPolicy}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /
          authorizer: ${self:custom.authorizer}

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /{id}
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /{id}/bid
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: src/handlers/processAuctions.handler
    events:
      - schedule: rate(1 minute)

  uploadAuctionImage:
    handler: src/handlers/uploadAuctionImage.handler
    events:
      - http:
          method: PATCH
          path: /{id}/image
          authorizer: ${self:custom.authorizer}

package:
  individually: true

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.hyper-local.site
    staging: staging.api.hyper-local.site
    dev: dev.api.hyper-local.site
  customDomain:
    basePath: 'auctions'
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: '${self:custom.stage}'
    createRoute53Record: true
    hostedZoneId: Z091874218YWSO43A1ZKC
    certificateArn: arn:aws:acm:us-east-1:647504512489:certificate/d7234b8c-fef7-4a91-8c9b-8b06540c9c7e
  authorizer: arn:aws:lambda:${aws:region}:${aws:accountId}:function:hyperlocal-auth0-service-${self:provider.stage}-auth
  HyperlocalAuctionsTable:
    name: !Ref HyperlocalAuctionsTable
    arn: !GetAtt HyperlocalAuctionsTable.Arn
  HyperlocalMailQueue:
    arn: ${cf:hyperlocal-notification-service-${self:provider.stage}.HyperlocalMailQueueArn}
    url: ${cf:hyperlocal-notification-service-${self:provider.stage}.HyperlocalMailQueueUrl}
  HyperlocalAuctionsBucket:
    name: hyperlocal-auctions-bucket-${self:provider.stage}
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: 'node18'
    platform: 'node'
    concurrency: 10
